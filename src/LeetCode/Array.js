array()

function array () {
    let temp = null

    // =====  C  ====
    // temp = twoSum()                      // 1. 两数之和
    temp = removeDuplicates()            // 26. 删除排序数组中的重复项


    console.log('temp: ', temp)
}



//#######################################   C  ######################################
/*
1. 两数之和
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:
    给定 nums = [2, 7, 11, 15], target = 9
    因为 nums[0] + nums[1] = 2 + 7 = 9
    所以返回 [0, 1]
*/

function twoSum (nums, target) {
    nums = nums || [3,3]
    target = target || 6
    let len = nums.length;

    for (let i = 0; i < len; i++) {
        for (let j = i + 1; j < len; j++) {
            if (nums[i] + nums[j] == target) {
                return [i, j]
            }
        }
    }

    return []
}

/*
26. 删除排序数组中的重复项
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

示例:
    给定数组 nums = [1,1,2]
    函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

    给定 nums = [0,0,1,1,1,2,2,3,3,4]
    函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

    你不需要考虑数组中超出新长度后面的元素。
*/
/**
 * @param {number[]} nums
 * @return {number}
 */
function removeDuplicates (nums) {
    nums = nums || [0,0,1,1,1,2,2,3,3,4]
    let len = nums.length,
        n = 0

    if (len < 2) return len
    
    for(let i = 1; i < len; i++){
        if(nums[i] != nums[n]) {
            ++n
            nums[n] = nums[i]
        }
    }

    console.log('removeDuplicates: ', nums)
    return n+1;
}



//#######################################   B  ######################################

/*
31. 下一个排列
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
    1,2,3 → 1,3,2
    3,2,1 → 1,2,3
    1,1,5 → 1,5,1
*/


//#######################################   A  ######################################
